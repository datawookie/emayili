[{"path":"https://datawookie.github.io/emayili/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew B. Collier. Author, maintainer, copyright holder. Matt Dennis. Contributor. Antoine Bichat. Contributor. Daniel Fahey. Contributor. Johann R. Kleinbub. Contributor. Panagiotis Moulos. Contributor. Swechhya Bista. Contributor. Colin Fay. Contributor.","code":""},{"path":"https://datawookie.github.io/emayili/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Collier AB (2025). emayili: Send Email Messages. R package version 0.9.2, https://datawookie.github.io/emayili/.","code":"@Manual{,   title = {emayili: Send Email Messages},   author = {Andrew B. Collier},   year = {2025},   note = {R package version 0.9.2},   url = {https://datawookie.github.io/emayili/}, }"},{"path":"https://datawookie.github.io/emayili/index.html","id":"emayili-","dir":"","previous_headings":"","what":"Send Email Messages","title":"Send Email Messages","text":"emayili package sending emails R. design goals : works manner SMTP servers minimal dependencies (dependencies easily satisfied). package name adaption Zulu word email, imeyili. documentation emayili can found . pretend many stars project, plots quite fun.","code":""},{"path":"https://datawookie.github.io/emayili/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Send Email Messages","text":"Get stable version CRAN. grab directly GitHub.","code":"install.packages(\"emayili\") # Install from the master branch. remotes::install_github(\"datawookie/emayili\") # Install from the development branch. remotes::install_github(\"datawookie/emayili\", ref = \"dev\")"},{"path":"https://datawookie.github.io/emayili/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Send Email Messages","text":"Load library. Create message object.","code":"library(emayili)  packageVersion(\"emayili\") [1] '0.7.4' email <- envelope()"},{"path":"https://datawookie.github.io/emayili/index.html","id":"creating-a-message","dir":"","previous_headings":"Usage","what":"Creating a Message","title":"Send Email Messages","text":"message class envelope. Add addresses sender recipient. also bcc() reply() functions setting Bcc Reply-fields. can supply multiple addresses variety formats: single comma-separated string separate strings; vector strings. Add subject. Add text body. can use html() add HTML body. accepts either vector characters tagList() htmltools. Add attachment. can also create message single command: Simply printing message displays header information. can identify emails sent using emayili presence X-Mailer header includes package name version. want see complete MIME object, just convert string. can also call print() method specify details = TRUE.","code":"class(email) [1] \"envelope\" email <- email %>%   from(\"alice@yahoo.com\") %>%   to(\"bob@google.com\") %>%   cc(\"craig@google.com\") envelope() %>% to(\"bob@google.com, craig@google.com, erin@gmail.com\") envelope() %>% to(\"bob@google.com\", \"craig@google.com\", \"erin@gmail.com\") envelope() %>% to(c(\"bob@google.com\", \"craig@google.com\", \"erin@gmail.com\")) email <- email %>% subject(\"This is a plain text message!\") email <- email %>% text(\"Hello!\") library(htmltools)  email <- email %>% html(   tagList(     h2(\"Hello\"),     p(\"World!\")   ) ) email <- email %>% attachment(\"image.jpg\") email <- envelope(   to = \"bob@google.com\",   from = \"alice@yahoo.com\",   subject = \"This is a plain text message!\",   text = \"Hello!\" ) email Date:                        Tue, 22 Oct 2024 03:44:31 GMT X-Mailer:                    {emayili}-0.7.4 MIME-Version:                1.0 From:                        alice@yahoo.com To:                          bob@google.com Cc:                          craig@google.com Subject:                     This is a plain text message!"},{"path":"https://datawookie.github.io/emayili/index.html","id":"options","dir":"","previous_headings":"Usage","what":"Options","title":"Send Email Messages","text":"can set envelope.details option assert details always printed. default results returned methods invisible. can make visible via envelope.invisible (default: TRUE).","code":"# Always print envelope details. # options(envelope.details = TRUE) # Always show envelope. # options(envelope.invisible = FALSE)"},{"path":"https://datawookie.github.io/emayili/index.html","id":"interpolating-text","dir":"","previous_headings":"Usage","what":"Interpolating Text","title":"Send Email Messages","text":"can use glue syntax interpolate content body message.","code":"name <- \"Alice\"  envelope() %>%   text(\"Hello {{name}}!\") Date:                        Tue, 22 Oct 2024 03:44:31 GMT X-Mailer:                    {emayili}-0.7.4 MIME-Version:                1.0 Content-Type:                text/plain;                               charset=utf-8;                               format=flowed Content-Disposition:         inline Content-Transfer-Encoding:   7bit Content-MD5:                 nhjeY5ZYMzru+kSCGUzNKg==  Hello Alice!"},{"path":"https://datawookie.github.io/emayili/index.html","id":"rendering-markdown","dir":"","previous_headings":"Usage","what":"Rendering Markdown","title":"Send Email Messages","text":"can render Markdown straight message. Use either plain Markdown. R Markdown. cases function accept either file path character vector containing Markdown text.  Interpolation also works render().","code":"envelope() %>%   # Render plain Markdown from a character vector.   render(     \"Check out [`{emayili}`](https://cran.r-project.org/package=emayili).\"   ) Date:                        Tue, 22 Oct 2024 03:44:31 GMT X-Mailer:                    {emayili}-0.7.4 MIME-Version:                1.0 Content-Type:                text/html;                               charset=utf-8 Content-Disposition:         inline  <html><body><p>Check out <a href=\"https://cran.r-project.org/package=emayili\"><code>{emayili}<\/code><\/a>.<\/p><\/body><\/html> envelope() %>%   # Render R Markdown from a file.   render(\"message.Rmd\")"},{"path":"https://datawookie.github.io/emayili/index.html","id":"rendered-css","dir":"","previous_headings":"Usage","what":"Rendered CSS","title":"Send Email Messages","text":"render R Markdown document resulting HTML includes CSS three sources: Bootstrap highlightjs rmarkdown. can control propagate message using include_css parameter , default, set c(\"rmd\", \"bootstrap\", \"highlight\"). ðŸš¨ Note: Gmail doesnâ€™t like Bootstrap CSS. want styling work Gmail set include_css =  c(\"rmd\", \"highlight\").","code":""},{"path":"https://datawookie.github.io/emayili/index.html","id":"extra-css","dir":"","previous_headings":"Usage","what":"Extra CSS","title":"Send Email Messages","text":"can insert extra CSS rendered messages. trouble getting work Gmail might worthwhile taking look CSS support.","code":"envelope() %>%   render(\"message.Rmd\", css_files = \"extra.css\")"},{"path":"https://datawookie.github.io/emayili/index.html","id":"adding-an-inline-image","dir":"","previous_headings":"Usage","what":"Adding an Inline Image","title":"Send Email Messages","text":"Adding inline image HTML message possible. two ways achieve . 1. Base64 Encoding First â€™ll need Base64 encode image. create HTML message body. finally add email. Note: â€™s important specify appropriate media type (image/jpeg JPEG image/png PNG). 2. Using CID Unfortunately mail clients (like Gmail) display Base64 encoded images. case using CID working alternative. First create message body references image CID. attach image specify cid argument.","code":"img_base64 <- base64enc::base64encode(\"image.jpg\") html_body <- sprintf('<html><body><img src=\"data:image/jpeg;base64,%s\"><\/body><\/html>', img_base64) email <- envelope() %>% html(html_body) html_body <- '<html><body><img src=\"cid:image\"><\/body><\/html>' email <- envelope() %>%   html(html_body) %>%   attachment(path = \"image.jpg\", cid = \"image\")"},{"path":"https://datawookie.github.io/emayili/index.html","id":"create-a-server-object","dir":"","previous_headings":"Usage","what":"Create a Server Object","title":"Send Email Messages","text":"Create SMTP server object. â€™s bad practice include credentials script. better approach keep credentials .Renviron file. can pull variables R using Sys.getenv() create server object. â€™re trying send email host uses STARTTLS security protocol (like Gmail, Yahoo! AOL), probably blocked due insufficient security. order circumvent , can grant access less secure apps. See links specifics: Gmail Yahoo! AOL. Gmail recently changed authentication procedure. trouble connecting Gmail SMTP server take look .","code":"smtp <- server(   host = \"smtp.gmail.com\",   port = 465,   username = \"bob@gmail.com\",   password = \"bd40ef6d4a9413de9c1318a65cbae5d7\" ) GMAIL_USERNAME=\"bob@gmail.com\" GMAIL_PASSWORD=\"bd40ef6d4a9413de9c1318a65cbae5d7\" smtp <- server(   host = \"smtp.gmail.com\",   port = 465,   username = Sys.getenv(\"GMAIL_USERNAME\"),   password = Sys.getenv(\"GMAIL_PASSWORD\") )"},{"path":"https://datawookie.github.io/emayili/index.html","id":"sending-a-message","dir":"","previous_headings":"Usage","what":"Sending a Message","title":"Send Email Messages","text":"Send message. see guts message passed SMTP server:","code":"smtp(email, verbose = TRUE) print(email, details = TRUE)"},{"path":"https://datawookie.github.io/emayili/index.html","id":"encryption","dir":"","previous_headings":"Usage","what":"Encryption","title":"Send Email Messages","text":"transport-level encryption end--end email encryption supported. SMTP connection can initiated port 465 (SMTPS, see RFC 8314) 587 (SMTP-MSA, see RFC 6409), enabling transport-level encryption. Public-key cryptography (via GnuPG) can used sign /encrypt message contents end--end encryption.","code":""},{"path":"https://datawookie.github.io/emayili/index.html","id":"standards-documents","dir":"","previous_headings":"","what":"Standards Documents","title":"Send Email Messages","text":"following (draft) standards documents relate emails: RFC 2822 â€” Internet Message Format RFC 5321 â€” Simple Mail Transfer Protocol RFC 5322 â€” Internet Message Format","code":""},{"path":"https://datawookie.github.io/emayili/index.html","id":"similar-packages","dir":"","previous_headings":"","what":"Similar Packages","title":"Send Email Messages","text":"selection R packages also send emails: blastula blatr (Windows) gmailr mail mailR sendmailR ponyexpress","code":""},{"path":[]},{"path":[]},{"path":"https://datawookie.github.io/emayili/index.html","id":"code-coverage","dir":"","previous_headings":"Developer Notes","what":"Code Coverage","title":"Send Email Messages","text":"can find test coverage report Codecov. development purposes â€™s convenient use {covr} package. Generate coverage report. Calculate test coverage. Coverage statistics data frame. Show lines without coverage.","code":"library(covr)  # Tests that are skipped on CRAN should still be included in coverage report. # Sys.setenv(NOT_CRAN = \"true\")  report() coverage <- package_coverage() as.data.frame(coverage) zero_coverage(coverage)"},{"path":"https://datawookie.github.io/emayili/index.html","id":"checks","dir":"","previous_headings":"Developer Notes","what":"Checks","title":"Send Email Messages","text":"Check spelling. Quick local checks. Remote checks (take longer thorough).","code":"spelling::spell_check_package() devtools::check() devtools::check_win_devel()  # Check for a specific platform. # rhub::check(platform = \"debian-gcc-devel\") rhub::check_on_windows(check_args = \"--force-multiarch\") rhub::check_on_solaris()  # Check on a bunch of platforms. # rhub::check_for_cran()  # Check on important platforms. # rhub::check_for_cran(platforms = c(   \"debian-gcc-release\",   \"ubuntu-gcc-release\",   \"macos-m1-bigsur-release\",   \"windows-x86_64-release\",   NULL ))"},{"path":"https://datawookie.github.io/emayili/reference/address.html","id":null,"dir":"Reference","previous_headings":"","what":"Email Address â€” address","title":"Email Address â€” address","text":"Create address object represents email address.","code":""},{"path":"https://datawookie.github.io/emayili/reference/address.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Email Address â€” address","text":"","code":"address(   email = NA,   display = NA,   local = NA,   domain = NA,   normalise = TRUE,   validate = FALSE )"},{"path":"https://datawookie.github.io/emayili/reference/address.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Email Address â€” address","text":"email Email address. display Display name. local Local part email address. domain Domain part email address. normalise Whether try normalise address RFC-5321 requirements. validate Whether validate address.","code":""},{"path":"https://datawookie.github.io/emayili/reference/address.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Email Address â€” address","text":"address object, representing email address.","code":""},{"path":"https://datawookie.github.io/emayili/reference/address.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Email Address â€” address","text":"","code":"address(\"gerry@gmail.com\") #> [1] \"gerry@gmail.com\" address(\"gerry@gmail.com\", \"Gerald\") #> [1] \"Gerald <gerry@gmail.com>\" address(\"gerry@gmail.com\", \"Gerald Durrell\") #> [1] \"Gerald Durrell <gerry@gmail.com>\" # Display name in \"Last, First\" format. address(\"gerry@gmail.com\", \"Durrell, Gerald\") #> [1] \"Durrell, Gerald <gerry@gmail.com>\" # Display name contains non-ASCII characters. address(\"hans@gmail.com\", \"HansjÃ¶rg MÃ¼ller\") #> [1] \"HansjÃ¶rg MÃ¼ller <hans@gmail.com>\""},{"path":"https://datawookie.github.io/emayili/reference/addresses.html","id":null,"dir":"Reference","previous_headings":"","what":"Add address fields to message â€” addresses","title":"Add address fields to message â€” addresses","text":"Add address fields message","code":""},{"path":"https://datawookie.github.io/emayili/reference/addresses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add address fields to message â€” addresses","text":"","code":"to(msg, ..., append = TRUE)  cc(msg, ..., append = TRUE)  bcc(msg, ..., append = TRUE)  from(msg, addr = NULL)  reply(msg, addr = NULL)  return_path(msg, addr = NULL)  sender(msg, addr = NULL)"},{"path":"https://datawookie.github.io/emayili/reference/addresses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add address fields to message â€” addresses","text":"msg message object. ... Addresses. append Whether append replace addresses. addr Single address.","code":""},{"path":"https://datawookie.github.io/emayili/reference/addresses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add address fields to message â€” addresses","text":"message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/addresses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add address fields to message â€” addresses","text":"","code":"# Populating the To field. msg <- envelope() msg %>% to(\"bob@gmail.com, alice@yahoo.com\") msg %>% to(\"bob@gmail.com\", \"alice@yahoo.com\") msg %>% to(c(\"bob@gmail.com\", \"alice@yahoo.com\"))  # Populating the Cc field. msg <- envelope() msg %>% cc(\"bob@gmail.com, alice@yahoo.com\") msg %>% cc(\"bob@gmail.com\", \"alice@yahoo.com\") msg %>% cc(c(\"bob@gmail.com\", \"alice@yahoo.com\"))  # Populating the Bcc field. msg <- envelope() msg %>% bcc(\"bob@gmail.com, alice@yahoo.com\") msg %>% bcc(\"bob@gmail.com\", \"alice@yahoo.com\") msg %>% bcc(c(\"bob@gmail.com\", \"alice@yahoo.com\"))  msg <- envelope()  # Populating the From field. msg %>% from(\"craig@gmail.com\")  # Populating the Reply-To field. msg <- envelope() msg %>% reply(\"gerry@gmail.com\")  # Populating the Return-Path field. msg <- envelope() msg %>% return_path(\"bounced-mail@devnull.org\")  # Populating the Sender field. msg <- envelope() msg %>% sender(\"on_behalf_of@gmail.com\")"},{"path":"https://datawookie.github.io/emayili/reference/after.envelope.html","id":null,"dir":"Reference","previous_headings":"","what":"Append children to message â€” after.envelope","title":"Append children to message â€” after.envelope","text":"Append children message","code":""},{"path":"https://datawookie.github.io/emayili/reference/after.envelope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append children to message â€” after.envelope","text":"","code":"# S3 method for class 'envelope' after(x, child)"},{"path":"https://datawookie.github.io/emayili/reference/after.envelope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append children to message â€” after.envelope","text":"x Message object child child appended","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.address.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an address object â€” as.address","title":"Create an address object â€” as.address","text":"Create address object","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.address.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an address object â€” as.address","text":"","code":"as.address(addr, validate = FALSE)"},{"path":"https://datawookie.github.io/emayili/reference/as.address.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an address object â€” as.address","text":"addr email address. validate Whether validate address.","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.address.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an address object â€” as.address","text":"list address objects.","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.address.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an address object â€” as.address","text":"","code":"as.address(\"gerry@gmail.com\") #> [1] \"gerry@gmail.com\" as.address(\"Gerald <gerry@gmail.com>\") #> [1] \"Gerald <gerry@gmail.com>\" as.address(c(\"Gerald <gerry@gmail.com>\", \"alice@yahoo.com\", \"jim@aol.com\")) #> [1] \"Gerald <gerry@gmail.com>\" \"alice@yahoo.com\"          #> [3] \"jim@aol.com\"              as.address(\"Gerald <gerry@gmail.com>, alice@yahoo.com, jim@aol.com\") #> [1] \"Gerald <gerry@gmail.com>\" as.address(\"Durrell, Gerald <gerry@gmail.com>\") #> [1] \"Durrell, Gerald <gerry@gmail.com>\""},{"path":"https://datawookie.github.io/emayili/reference/as.character.MIME.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert MIME object to character vector â€” as.character.MIME","title":"Convert MIME object to character vector â€” as.character.MIME","text":"Convert MIME object character vector","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.character.MIME.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert MIME object to character vector â€” as.character.MIME","text":"","code":"# S3 method for class 'MIME' as.character(x, ...)"},{"path":"https://datawookie.github.io/emayili/reference/as.character.MIME.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert MIME object to character vector â€” as.character.MIME","text":"x MIME object ... arguments passed methods.","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.character.address.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert address object to character â€” as.character.address","title":"Convert address object to character â€” as.character.address","text":"display name specified \"Last, First\" display name quoted.","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.character.address.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert address object to character â€” as.character.address","text":"","code":"# S3 method for class 'address' as.character(x, ...)"},{"path":"https://datawookie.github.io/emayili/reference/as.character.address.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert address object to character â€” as.character.address","text":"x address object. ... arguments passed methods.","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.character.address.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert address object to character â€” as.character.address","text":"character vector.","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.character.envelope.html","id":null,"dir":"Reference","previous_headings":"","what":"Create formatted message. â€” as.character.envelope","title":"Create formatted message. â€” as.character.envelope","text":"Accepts message object formats MIME document.","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.character.envelope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create formatted message. â€” as.character.envelope","text":"","code":"# S3 method for class 'envelope' as.character(x, ..., details = TRUE, encode = FALSE)"},{"path":"https://datawookie.github.io/emayili/reference/as.character.envelope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create formatted message. â€” as.character.envelope","text":"x message object. ... arguments passed methods. details Whether display full message content. encode Whether encode headers.","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.character.envelope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create formatted message. â€” as.character.envelope","text":"formatted message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.character.header.html","id":null,"dir":"Reference","previous_headings":"","what":"Create formatted header. â€” as.character.header","title":"Create formatted header. â€” as.character.header","text":"Accepts header object formats header field.","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.character.header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create formatted header. â€” as.character.header","text":"","code":"# S3 method for class 'header' as.character(x, width = 30, ...)"},{"path":"https://datawookie.github.io/emayili/reference/as.character.header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create formatted header. â€” as.character.header","text":"x header object. width width head name field. ... arguments passed methods.","code":""},{"path":"https://datawookie.github.io/emayili/reference/as.character.header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create formatted header. â€” as.character.header","text":"formatted header field.","code":""},{"path":"https://datawookie.github.io/emayili/reference/attachment.html","id":null,"dir":"Reference","previous_headings":"","what":"Add attachments to a message object â€” attachment","title":"Add attachments to a message object â€” attachment","text":"Add attachments message object","code":""},{"path":"https://datawookie.github.io/emayili/reference/attachment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add attachments to a message object â€” attachment","text":"","code":"attachment(   msg,   path,   name = NA,   type = NA,   cid = NA,   disposition = \"attachment\" )"},{"path":"https://datawookie.github.io/emayili/reference/attachment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add attachments to a message object â€” attachment","text":"msg message object. path Path file. name Name used attachment (defaults base name path). type MIME type NA, result guess based file extension. cid Content-ID NA. disposition attachment presented (\"inline\" \"attachment\")?","code":""},{"path":"https://datawookie.github.io/emayili/reference/attachment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add attachments to a message object â€” attachment","text":"message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/attachment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add attachments to a message object â€” attachment","text":"","code":"path_mtcars <- tempfile(fileext = \".csv\") path_scatter <- tempfile(fileext = \".png\") path_cats <- system.file(\"cats.jpg\", package = \"emayili\")  write.csv(mtcars, path_mtcars)  png(path_scatter) plot(1:10) dev.off() #> pdf  #>   2   msg <- envelope() %>%   attachment(path_mtcars) %>%   # This attachment will have file name \"cats.jpg\".   attachment(path_cats, name = \"cats.jpg\", type = \"image/jpeg\") %>%   attachment(path_scatter, cid = \"scatter\")  file.remove(path_scatter, path_mtcars) #> [1] TRUE TRUE"},{"path":"https://datawookie.github.io/emayili/reference/c.address.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate address objects â€” c.address","title":"Concatenate address objects â€” c.address","text":"Concatenate address objects","code":""},{"path":"https://datawookie.github.io/emayili/reference/c.address.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate address objects â€” c.address","text":"","code":"# S3 method for class 'address' c(...)"},{"path":"https://datawookie.github.io/emayili/reference/c.address.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate address objects â€” c.address","text":"... Address objects concatenated.","code":""},{"path":"https://datawookie.github.io/emayili/reference/c.address.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate address objects â€” c.address","text":"address object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/c.address.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate address objects â€” c.address","text":"","code":"gerry <- as.address(\"Gerald <gerry@gmail.com>\") alice <- address(\"alice@yahoo.com\") jim <- address(\"jim@aol.com\", \"Jim\") c(gerry, alice) #> [1] \"Gerald <gerry@gmail.com>\" \"alice@yahoo.com\"          c(gerry, c(alice, jim)) #> [1] \"Gerald <gerry@gmail.com>\" \"alice@yahoo.com\"          #> [3] \"Jim <jim@aol.com>\""},{"path":"https://datawookie.github.io/emayili/reference/cleave.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a compound address object â€” cleave","title":"Split a compound address object â€” cleave","text":"Split compound address object","code":""},{"path":"https://datawookie.github.io/emayili/reference/cleave.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a compound address object â€” cleave","text":"","code":"cleave(addr)"},{"path":"https://datawookie.github.io/emayili/reference/cleave.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a compound address object â€” cleave","text":"addr address object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/cleave.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a compound address object â€” cleave","text":"list address objects, contains single address.","code":""},{"path":"https://datawookie.github.io/emayili/reference/cleave.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a compound address object â€” cleave","text":"","code":"cleave(as.address(c(\"foo@yahoo.com\", \"bar@yahoo.com\"))) #> [[1]] #> [1] \"foo@yahoo.com\" #>  #> [[2]] #> [1] \"bar@yahoo.com\" #>"},{"path":"https://datawookie.github.io/emayili/reference/comments.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or query comments of message. â€” comments","title":"Add or query comments of message. â€” comments","text":"Add query comments message.","code":""},{"path":"https://datawookie.github.io/emayili/reference/comments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or query comments of message. â€” comments","text":"","code":"comments(msg, comments = NULL)"},{"path":"https://datawookie.github.io/emayili/reference/comments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or query comments of message. â€” comments","text":"msg message object. comments Comments message.","code":""},{"path":"https://datawookie.github.io/emayili/reference/comments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add or query comments of message. â€” comments","text":"message object comments message object (comments NULL).","code":""},{"path":[]},{"path":"https://datawookie.github.io/emayili/reference/comments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or query comments of message. â€” comments","text":"","code":"# Create a message and set the comments. msg <- envelope() %>% comments(\"This is a comment\")  # Retrieve the comments for a message. comments(msg) #> [1] \"This is a comment\""},{"path":"https://datawookie.github.io/emayili/reference/compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare vectors â€” compare","title":"Compare vectors â€” compare","text":"Returns TRUE wherever elements (including NA), FALSE everywhere else.","code":""},{"path":"https://datawookie.github.io/emayili/reference/compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare vectors â€” compare","text":"","code":"compare(lhs, rhs)"},{"path":"https://datawookie.github.io/emayili/reference/compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare vectors â€” compare","text":"lhs LHS operation. rhs RHS operation.","code":""},{"path":"https://datawookie.github.io/emayili/reference/compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare vectors â€” compare","text":"Boolean value.","code":""},{"path":"https://datawookie.github.io/emayili/reference/compliant.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests whether an email address is syntactically correct â€” compliant","title":"Tests whether an email address is syntactically correct â€” compliant","text":"Checks whether email address conforms syntax rules.","code":""},{"path":"https://datawookie.github.io/emayili/reference/compliant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests whether an email address is syntactically correct â€” compliant","text":"","code":"compliant(addr, error = FALSE)"},{"path":"https://datawookie.github.io/emayili/reference/compliant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests whether an email address is syntactically correct â€” compliant","text":"addr email address. error Whether create error compliant.","code":""},{"path":"https://datawookie.github.io/emayili/reference/compliant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests whether an email address is syntactically correct â€” compliant","text":"Boolean.","code":""},{"path":"https://datawookie.github.io/emayili/reference/compliant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tests whether an email address is syntactically correct â€” compliant","text":"email address may take either following forms: local@domain Display Name <local@domain>.","code":""},{"path":"https://datawookie.github.io/emayili/reference/compliant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests whether an email address is syntactically correct â€” compliant","text":"","code":"compliant(\"alice@example.com\") #> [1] TRUE compliant(\"alice?example.com\") #> [1] FALSE"},{"path":"https://datawookie.github.io/emayili/reference/cutoff.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or query message expiry or reply-by time â€” cutoff","title":"Set or query message expiry or reply-by time â€” cutoff","text":"Functions specify time message expires reply requested.","code":""},{"path":"https://datawookie.github.io/emayili/reference/cutoff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or query message expiry or reply-by time â€” cutoff","text":"","code":"expires(msg, datetime = NULL, tz = \"\")  replyby(msg, datetime = NULL, tz = \"\")"},{"path":"https://datawookie.github.io/emayili/reference/cutoff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or query message expiry or reply-by time â€” cutoff","text":"msg message object. datetime Date time. tz character string specifying time zone.","code":""},{"path":"https://datawookie.github.io/emayili/reference/cutoff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set or query message expiry or reply-by time â€” cutoff","text":"message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/cutoff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set or query message expiry or reply-by time â€” cutoff","text":"Manipulate Expires Reply-fields specified RFC 2156.","code":""},{"path":"https://datawookie.github.io/emayili/reference/cutoff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set or query message expiry or reply-by time â€” cutoff","text":"","code":"envelope() %>%   expires(\"2030-01-01 13:25:00\", \"UTC\") envelope() %>%   replyby(\"2021-12-25 06:00:00\", \"GMT\")"},{"path":"https://datawookie.github.io/emayili/reference/display.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract display name â€” display","title":"Extract display name â€” display","text":"Extracts display name email address.","code":""},{"path":"https://datawookie.github.io/emayili/reference/display.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract display name â€” display","text":"","code":"display(addr)"},{"path":"https://datawookie.github.io/emayili/reference/display.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract display name â€” display","text":"addr address object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/display.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract display name â€” display","text":"display name NA.","code":""},{"path":"https://datawookie.github.io/emayili/reference/display.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract display name â€” display","text":"","code":"gerry <- as.address(\"Gerald <gerry@gmail.com>\") display(gerry) #> [1] \"Gerald\""},{"path":"https://datawookie.github.io/emayili/reference/domain.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract domain of email address â€” domain","title":"Extract domain of email address â€” domain","text":"Extract domain email address","code":""},{"path":"https://datawookie.github.io/emayili/reference/domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract domain of email address â€” domain","text":"","code":"domain(addr)"},{"path":"https://datawookie.github.io/emayili/reference/domain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract domain of email address â€” domain","text":"addr address object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/domain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract domain of email address â€” domain","text":"character vector.","code":""},{"path":"https://datawookie.github.io/emayili/reference/domain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract domain of email address â€” domain","text":"","code":"domain(\"alice@example.com\") #> [1] \"example.com\""},{"path":"https://datawookie.github.io/emayili/reference/encrypt.html","id":null,"dir":"Reference","previous_headings":"","what":"Encrypt or sign a message â€” encrypt","title":"Encrypt or sign a message â€” encrypt","text":"Specify whether message encrypted, signed public key attached.","code":""},{"path":"https://datawookie.github.io/emayili/reference/encrypt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encrypt or sign a message â€” encrypt","text":"","code":"encrypt(msg, encrypt = TRUE, sign = TRUE, public_key = TRUE)  signature(msg, public_key = TRUE)"},{"path":"https://datawookie.github.io/emayili/reference/encrypt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encrypt or sign a message â€” encrypt","text":"msg message object. encrypt Whether encrypt message. TRUE entire message encrypted using private key sender. sign Whether sign message. TRUE entire message signed using private key sender. public_key Whether attach public key. TRUE public key sender attached.","code":""},{"path":"https://datawookie.github.io/emayili/reference/encrypt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encrypt or sign a message â€” encrypt","text":"message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/encrypt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Encrypt or sign a message â€” encrypt","text":"signature() function add digital signature message. also optionally include copy sender's public key. encrypt() function encrypt contents message using public key(s) recipient(s). can also add digital signature message (default behaviour) include copy sender's public key. Signing happens encryption, digital signature accessible message decrypted. recipient longer access private key email client unable decrypt message able access message contents.","code":""},{"path":"https://datawookie.github.io/emayili/reference/encrypt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encrypt or sign a message â€” encrypt","text":"","code":"if (FALSE) { # \\dontrun{ msg <- envelope(   from = \"flotilla@kriegsmarine.gov\",   to = \"schunk@u-boat.com\",   subject = \"Top Secret Message\",   text = \"Immediate readiness. There are indications that the invasion has begun.\" ) # Encrypt and sign the message. msg %>% encrypt() # Only encrypt the message. msg %>% encrypt(sign = FALSE) # Only sign the message. msg %>% signature() msg %>% encrypt(encrypt = FALSE) } # }"},{"path":"https://datawookie.github.io/emayili/reference/envelope.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a message. â€” envelope","title":"Create a message. â€” envelope","text":"Create message.","code":""},{"path":"https://datawookie.github.io/emayili/reference/envelope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a message. â€” envelope","text":"","code":"envelope(   to = NULL,   from = NULL,   cc = NULL,   bcc = NULL,   reply = NULL,   subject = NULL,   id = NULL,   importance = NULL,   priority = NULL,   text = NULL,   html = NULL,   encrypt = FALSE,   sign = FALSE,   public_key = FALSE )"},{"path":"https://datawookie.github.io/emayili/reference/envelope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a message. â€” envelope","text":"See (). See (). cc See cc(). bcc See bcc(). reply See reply(). subject See subject(). id See id(). importance See importance(). priority See priority(). text See text(). html See html(). encrypt Whether encrypt message. TRUE entire message encrypted using private key sender. sign Whether sign message. TRUE entire message signed using private key sender. public_key Whether attach public key. TRUE public key sender attached.","code":""},{"path":"https://datawookie.github.io/emayili/reference/envelope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a message. â€” envelope","text":"message object.","code":""},{"path":[]},{"path":"https://datawookie.github.io/emayili/reference/envelope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a message. â€” envelope","text":"","code":"# Create an (empty) message object. # msg <- envelope()  # Create a complete message object, specifying all available fields. # envelope(   to = \"bob@gmail.com\",   from = \"craig@gmail.com\",   cc = \"alex@gmail.com\",   bcc = \"shannon@gmail.com\",   reply = \"craig@yahoo.com\",   importance = \"high\",   priority = \"urgent\",   subject = \"Hiya!\",   text = \"Hi Bob, how are you?\" ) #> Date:                         Tue, 28 Jan 2025 08:02:52 GMT #> X-Mailer:                     {emayili}-0.9.2 #> MIME-Version:                 1.0 #> To:                           bob@gmail.com #> From:                         craig@gmail.com #> Cc:                           alex@gmail.com #> Reply-To:                     craig@yahoo.com #> Subject:                      Hiya! #> Importance:                   high #> Priority:                     urgent"},{"path":"https://datawookie.github.io/emayili/reference/format.address.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode email addresses in a common format â€” format.address","title":"Encode email addresses in a common format â€” format.address","text":"Encode email addresses common format","code":""},{"path":"https://datawookie.github.io/emayili/reference/format.address.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode email addresses in a common format â€” format.address","text":"","code":"# S3 method for class 'address' format(x, quote = TRUE, encode = FALSE, ...)"},{"path":"https://datawookie.github.io/emayili/reference/format.address.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode email addresses in a common format â€” format.address","text":"x address object. quote Whether quote display name (relevant display name given \"Last, First\" format). encode Whether encode headers. ... arguments passed methods.","code":""},{"path":"https://datawookie.github.io/emayili/reference/format.address.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode email addresses in a common format â€” format.address","text":"character vector.","code":""},{"path":"https://datawookie.github.io/emayili/reference/html.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an HTML body to a message object. â€” html","title":"Add an HTML body to a message object. â€” html","text":"Add HTML body message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an HTML body to a message object. â€” html","text":"","code":"html(   msg,   content,   disposition = \"inline\",   charset = \"utf-8\",   encoding = NA,   css_files = c(),   language = FALSE,   interpolate = TRUE,   .open = \"{{\",   .close = \"}}\",   .envir = NULL )"},{"path":"https://datawookie.github.io/emayili/reference/html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an HTML body to a message object. â€” html","text":"msg message object. content string message content. disposition content displayed inline attachment? Valid options \"inline\" \"attachment\". set NA guess appropriate value. charset character set used. often either \"UTF-8\" \"ISO-8859-1\". encoding content transformed ASCII. Options \"7bit\", \"quoted-printable\" \"base64\". Use NA NULL (\"identity\") encoding. css_files Extra CSS files. language Language content. FALSE include language field. TRUE attempt auto-detect language. Otherwise use specified language. interpolate Whether interpolate input using glue. .open opening delimiter. .close closing delimiter. .envir Environment used glue interpolation. Defaults parent.frame().","code":""},{"path":"https://datawookie.github.io/emayili/reference/html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an HTML body to a message object. â€” html","text":"message object.","code":""},{"path":[]},{"path":"https://datawookie.github.io/emayili/reference/html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an HTML body to a message object. â€” html","text":"","code":"# Inline HTML message. envelope() %>% html(\"<b>Hello!<\/b>\")  # Read HTML message from a file. htmlfile <- tempfile(fileext = \".html\") cat(\"<p>Hello!<\/p>\\n\", file = htmlfile) envelope() %>% html(htmlfile)  # You can pass a vector of character. Components will be separated by a # \"\\n\". envelope() %>% html(c(\"<b>Hello<\/b>\", \"<p>World!<\/p>\"))  # You can also pass a tagList from {htmltools}. if (requireNamespace(\"htmltools\", quietly = TRUE)) {   library(htmltools)   envelope() %>% html(tagList(h2(\"Hello\"), p(\"World!\"))) }"},{"path":"https://datawookie.github.io/emayili/reference/id.html","id":null,"dir":"Reference","previous_headings":"","what":"Set message ID. â€” id","title":"Set message ID. â€” id","text":"Set message ID.","code":""},{"path":"https://datawookie.github.io/emayili/reference/id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set message ID. â€” id","text":"","code":"id(msg, id)"},{"path":"https://datawookie.github.io/emayili/reference/id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set message ID. â€” id","text":"msg message object. id ID message.","code":""},{"path":"https://datawookie.github.io/emayili/reference/id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set message ID. â€” id","text":"message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set message ID. â€” id","text":"","code":"# Create a message and set the ID msg <- envelope() %>% id(\"1234567890.123456@example.com\") # Create a message with specified ID msg <- envelope(id=\"1234567890.123456@example.com\")"},{"path":"https://datawookie.github.io/emayili/reference/keywords.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or query keywords of message. â€” keywords","title":"Add or query keywords of message. â€” keywords","text":"Add query keywords message.","code":""},{"path":"https://datawookie.github.io/emayili/reference/keywords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or query keywords of message. â€” keywords","text":"","code":"keywords(msg, ..., append = FALSE)"},{"path":"https://datawookie.github.io/emayili/reference/keywords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or query keywords of message. â€” keywords","text":"msg message object. ... Keywords. append Whether append replace keywords.","code":""},{"path":"https://datawookie.github.io/emayili/reference/keywords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add or query keywords of message. â€” keywords","text":"message object comments message object (comments NULL).","code":""},{"path":[]},{"path":"https://datawookie.github.io/emayili/reference/keywords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or query keywords of message. â€” keywords","text":"","code":"# Create a message and set the keywords. envelope() %>% keywords(\"newsletter, marketing\") envelope() %>% keywords(\"newsletter\", \"marketing\") envelope() %>% keywords(c(\"newsletter\", \"marketing\"))  # Retrieve the keywords for a message. msg <- envelope() %>% keywords(\"newsletter, marketing\") keywords(msg) #> [1] \"newsletter, marketing\""},{"path":"https://datawookie.github.io/emayili/reference/length.address.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of address object â€” length.address","title":"Length of address object â€” length.address","text":"Length address object","code":""},{"path":"https://datawookie.github.io/emayili/reference/length.address.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of address object â€” length.address","text":"","code":"# S3 method for class 'address' length(x)"},{"path":"https://datawookie.github.io/emayili/reference/length.address.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of address object â€” length.address","text":"x address object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/length.address.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of address object â€” length.address","text":"character vector.","code":""},{"path":"https://datawookie.github.io/emayili/reference/local.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract local part of email address â€” local","title":"Extract local part of email address â€” local","text":"Extract local part email address","code":""},{"path":"https://datawookie.github.io/emayili/reference/local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract local part of email address â€” local","text":"","code":"local(addr)"},{"path":"https://datawookie.github.io/emayili/reference/local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract local part of email address â€” local","text":"addr address object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract local part of email address â€” local","text":"character vector.","code":""},{"path":"https://datawookie.github.io/emayili/reference/local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract local part of email address â€” local","text":"","code":"local(\"alice@example.com\") #> [1] \"alice\""},{"path":"https://datawookie.github.io/emayili/reference/message_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a message ID â€” message_id","title":"Create a message ID â€” message_id","text":"Create message ID","code":""},{"path":"https://datawookie.github.io/emayili/reference/message_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a message ID â€” message_id","text":"","code":"message_id(domain = \"mail.gmail.com\")"},{"path":"https://datawookie.github.io/emayili/reference/message_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a message ID â€” message_id","text":"domain Originating domain.","code":""},{"path":"https://datawookie.github.io/emayili/reference/message_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a message ID â€” message_id","text":"message ID.","code":""},{"path":"https://datawookie.github.io/emayili/reference/message_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a message ID â€” message_id","text":"","code":"message_id() #> [1] \"20250128080254-bABKKu3B84@mail.gmail.com\" message_id(\"example.com\") #> [1] \"20250128080254-4nec1ZSGZG@example.com\""},{"path":"https://datawookie.github.io/emayili/reference/mime-parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for MIME functions â€” mime-parameters","title":"Parameters for MIME functions â€” mime-parameters","text":"parameters occur commonly across functions components MIME document.","code":""},{"path":"https://datawookie.github.io/emayili/reference/mime-parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for MIME functions â€” mime-parameters","text":"content string message content. disposition content displayed inline attachment? Valid options \"inline\" \"attachment\". set NA guess appropriate value. charset character set used. often either \"UTF-8\" \"ISO-8859-1\". encoding content transformed ASCII. Options \"7bit\", \"quoted-printable\" \"base64\". Use NA NULL (\"identity\") encoding. language Language content. FALSE include language field. TRUE attempt auto-detect language. Otherwise use specified language. description Description content. name Name used downloading file. filename Path file. boundary Boundary string. type MIME type content. children List child MIME objects. interpolate Whether interpolate input using glue. .open opening delimiter. .close closing delimiter. .envir Environment used glue interpolation. Defaults parent.frame().","code":""},{"path":"https://datawookie.github.io/emayili/reference/normalise.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise email address â€” normalise","title":"Normalise email address â€” normalise","text":"Ensure email address standard format.","code":""},{"path":"https://datawookie.github.io/emayili/reference/normalise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise email address â€” normalise","text":"","code":"normalise(email)"},{"path":"https://datawookie.github.io/emayili/reference/normalise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise email address â€” normalise","text":"email email address.","code":""},{"path":"https://datawookie.github.io/emayili/reference/normalise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise email address â€” normalise","text":"email address.","code":""},{"path":"https://datawookie.github.io/emayili/reference/normalise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalise email address â€” normalise","text":"Performs following transformations: lowercase domain part replace Unicode characters compatible equivalents. See Unicode equivalence.","code":""},{"path":"https://datawookie.github.io/emayili/reference/normalise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise email address â€” normalise","text":"","code":"normalise(\"bob@GMAIL.COM\") #> [1] \"bob@gmail.com\""},{"path":"https://datawookie.github.io/emayili/reference/parties.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract sender and recipient(s) â€” parties","title":"Extract sender and recipient(s) â€” parties","text":"Extract sender recipient(s)","code":""},{"path":"https://datawookie.github.io/emayili/reference/parties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract sender and recipient(s) â€” parties","text":"","code":"parties(msg)"},{"path":"https://datawookie.github.io/emayili/reference/parties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract sender and recipient(s) â€” parties","text":"msg message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/parties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract sender and recipient(s) â€” parties","text":"tibble.","code":""},{"path":"https://datawookie.github.io/emayili/reference/parties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract sender and recipient(s) â€” parties","text":"","code":"msg <- envelope() %>%   from(\"Gerald <gerald@gmail.com>\") %>%   to(c(\"bob@gmail.com\", \"alice@yahoo.com\")) %>%   cc(\"Craig     < craig@gmail.com>\") %>%   bcc(\"  Erin   <erin@yahoo.co.uk    >\")  parties(msg) #> # A tibble: 5 Ã— 6 #>   type  address                   display raw              local  domain      #>   <chr> <chr>                     <chr>   <chr>            <chr>  <chr>       #> 1 From  Gerald <gerald@gmail.com> Gerald  gerald@gmail.com gerald gmail.com   #> 2 To    bob@gmail.com             NA      bob@gmail.com    bob    gmail.com   #> 3 To    alice@yahoo.com           NA      alice@yahoo.com  alice  yahoo.com   #> 4 Cc    Craig <craig@gmail.com>   Craig   craig@gmail.com  craig  gmail.com   #> 5 Bcc   Erin <erin@yahoo.co.uk>   Erin    erin@yahoo.co.uk erin   yahoo.co.uk"},{"path":"https://datawookie.github.io/emayili/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator â€” %>%","title":"Pipe operator â€” %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://datawookie.github.io/emayili/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator â€” %>%","text":"","code":"lhs %>% rhs"},{"path":"https://datawookie.github.io/emayili/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator â€” %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://datawookie.github.io/emayili/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator â€” %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://datawookie.github.io/emayili/reference/precedence.html","id":null,"dir":"Reference","previous_headings":"","what":"Add fields for message importance and priority â€” precedence","title":"Add fields for message importance and priority â€” precedence","text":"Functions influence message delivery speed importance.","code":""},{"path":"https://datawookie.github.io/emayili/reference/precedence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add fields for message importance and priority â€” precedence","text":"","code":"priority(msg, priority = NULL)  importance(msg, importance = NULL)"},{"path":"https://datawookie.github.io/emayili/reference/precedence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add fields for message importance and priority â€” precedence","text":"msg message object. priority Priority level. One \"non-urgent\", \"normal\", \"urgent\". importance Importance level. One \"low\", \"normal\", \"high\".","code":""},{"path":"https://datawookie.github.io/emayili/reference/precedence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add fields for message importance and priority â€” precedence","text":"message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/precedence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add fields for message importance and priority â€” precedence","text":"priority() function adds Priority header field gives hint influence transmission speed delivery. Valid values \"non-urgent\", \"normal\", \"urgent\". non-standard X-Priority header field similar, valid values 1 (Highest), 2 (High), 3 (Normal, default), 4 (Low), 5 (Lowest). importance() function adds Importance header field, gives hint message recipient important message . influence delivery speed.","code":""},{"path":"https://datawookie.github.io/emayili/reference/precedence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add fields for message importance and priority â€” precedence","text":"","code":"# How rapidly does the message need to be delivered? # envelope() %>%   subject(\"Deliver this immediately!\") %>%   priority(\"urgent\")  envelope(priority = \"non-urgent\") %>%   subject(\"No rush with this.\")  # How much attention should be paid by recipient? # envelope() %>%   subject(\"Read this immediately!\") %>%   importance(\"high\")  envelope(importance = \"low\") %>%   subject(\"Not important at all. Just delete.\")"},{"path":"https://datawookie.github.io/emayili/reference/print.address.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an address object â€” print.address","title":"Print an address object â€” print.address","text":"display name specifed \"Last, First\" display name quoted.","code":""},{"path":"https://datawookie.github.io/emayili/reference/print.address.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an address object â€” print.address","text":"","code":"# S3 method for class 'address' print(x, ...)"},{"path":"https://datawookie.github.io/emayili/reference/print.address.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an address object â€” print.address","text":"x address object. ... arguments passed methods.","code":""},{"path":"https://datawookie.github.io/emayili/reference/print.address.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an address object â€” print.address","text":"","code":"gerry <- as.address(\"gerry@gmail.com\") print(gerry) #> [1] \"gerry@gmail.com\""},{"path":"https://datawookie.github.io/emayili/reference/print.envelope.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a message object â€” print.envelope","title":"Print a message object â€” print.envelope","text":"message body printed details TRUE envelope_details option TRUE.","code":""},{"path":"https://datawookie.github.io/emayili/reference/print.envelope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a message object â€” print.envelope","text":"","code":"# S3 method for class 'envelope' print(x, details = NA, ...)"},{"path":"https://datawookie.github.io/emayili/reference/print.envelope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a message object â€” print.envelope","text":"x message object. details Whether display full message content. ... arguments passed methods.","code":""},{"path":"https://datawookie.github.io/emayili/reference/print.envelope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a message object â€” print.envelope","text":"","code":"msg <- envelope() %>% text(\"Hello, World!\")  print(msg) #> Date:                         Tue, 28 Jan 2025 08:02:55 GMT #> X-Mailer:                     {emayili}-0.9.2 #> MIME-Version:                 1.0 print(msg, details = TRUE) #> Date:                         Tue, 28 Jan 2025 08:02:55 GMT #> X-Mailer:                     {emayili}-0.9.2 #> MIME-Version:                 1.0 #> Content-Type:                 text/plain;  #>                               charset=utf-8;  #>                               format=flowed #> Content-Transfer-Encoding:    7bit #> Content-MD5:                  ZajifYh5KDgxtmS9i38K1A== #>  #> Hello, World!  options(envelope_details = TRUE) print(msg) #> Date:                         Tue, 28 Jan 2025 08:02:55 GMT #> X-Mailer:                     {emayili}-0.9.2 #> MIME-Version:                 1.0"},{"path":"https://datawookie.github.io/emayili/reference/qp.html","id":null,"dir":"Reference","previous_headings":"","what":"Quoted-Printable encoding â€” qp","title":"Quoted-Printable encoding â€” qp","text":"Encode decode Quoted-Printable encoding.","code":""},{"path":"https://datawookie.github.io/emayili/reference/qp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quoted-Printable encoding â€” qp","text":"","code":"qp_encode(x, crlf = CRLF)  qp_decode(x)"},{"path":"https://datawookie.github.io/emayili/reference/qp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quoted-Printable encoding â€” qp","text":"x string encoding decoding. crlf End--line characters.","code":""},{"path":"https://datawookie.github.io/emayili/reference/qp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quoted-Printable encoding â€” qp","text":"encoded string qp_encode() decoded string qp_decode().","code":""},{"path":"https://datawookie.github.io/emayili/reference/qp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quoted-Printable encoding â€” qp","text":"","code":"qp_encode(\"Mieux vaut Ãªtre seul que mal accompagnÃ©.\") #> [1] \"Mieux vaut =C3=AAtre seul que mal accompagn=C3=A9.\" qp_decode(\"Mieux vaut =C3=AAtre seul que mal accompagn=C3=A9.\") #> [1] \"Mieux vaut Ãªtre seul que mal accompagnÃ©.\""},{"path":"https://datawookie.github.io/emayili/reference/raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract raw email address â€” raw","title":"Extract raw email address â€” raw","text":"Strips display name email address (present).","code":""},{"path":"https://datawookie.github.io/emayili/reference/raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract raw email address â€” raw","text":"","code":"raw(addr)"},{"path":"https://datawookie.github.io/emayili/reference/raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract raw email address â€” raw","text":"addr address object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract raw email address â€” raw","text":"raw email address.","code":""},{"path":"https://datawookie.github.io/emayili/reference/raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract raw email address â€” raw","text":"","code":"gerry <- as.address(\"Gerald <gerry@gmail.com>\") raw(gerry) #> [1] \"gerry@gmail.com\""},{"path":"https://datawookie.github.io/emayili/reference/receipt.html","id":null,"dir":"Reference","previous_headings":"","what":"Request read or delivery receipts â€” receipt","title":"Request read or delivery receipts â€” receipt","text":"Request recipient acknowledge read message. Inserts MDN (Message Disposition Notification) header entries.","code":""},{"path":"https://datawookie.github.io/emayili/reference/receipt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request read or delivery receipts â€” receipt","text":"","code":"request_receipt_read(msg, addr = NULL)  request_receipt_delivery(msg, addr = NULL)"},{"path":"https://datawookie.github.io/emayili/reference/receipt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request read or delivery receipts â€” receipt","text":"msg message object. addr Single address (optional). address specified use sender address.","code":""},{"path":"https://datawookie.github.io/emayili/reference/receipt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request read or delivery receipts â€” receipt","text":"message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/render.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Markdown into email â€” render","title":"Render Markdown into email â€” render","text":"Render either Plain Markdown R Markdown directly body email. input file interpreted R Markdown extension either \"Rmd\" \"Rmarkdown\". Otherwise processed Plain Markdown.","code":""},{"path":"https://datawookie.github.io/emayili/reference/render.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Markdown into email â€” render","text":"","code":"render(   msg,   input,   params = NULL,   squish = TRUE,   css_files = c(),   include_css = c(\"rmd\", \"bootstrap\"),   language = FALSE,   interpolate = TRUE,   .open = \"{{\",   .close = \"}}\",   .envir = NULL )"},{"path":"https://datawookie.github.io/emayili/reference/render.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Markdown into email â€” render","text":"msg message object. input input Markdown file rendered character vector Markdown text. params list named parameters override custom parameters specified YAML front-matter. squish Whether clean whitespace rendered document. css_files Extra CSS files. include_css Whether include rendered CSS various sources (\"rmd\" â€” native R Markdown CSS; \"bootstrap\" â€” Bootstrap CSS). language Language content. FALSE include language field. TRUE attempt auto-detect language. Otherwise use specified language. interpolate Whether interpolate input using glue. .open opening delimiter. .close closing delimiter. .envir Environment used glue interpolation. Defaults parent.frame().","code":""},{"path":"https://datawookie.github.io/emayili/reference/render.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Markdown into email â€” render","text":"message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/render.html","id":"plain-markdown","dir":"Reference","previous_headings":"","what":"Plain Markdown","title":"Render Markdown into email â€” render","text":"Plain Markdown processed commonmark::markdown_html().","code":""},{"path":"https://datawookie.github.io/emayili/reference/render.html","id":"r-markdown","dir":"Reference","previous_headings":"","what":"R Markdown","title":"Render Markdown into email â€” render","text":"R Markdown processed rmarkdown::render(). Regardless output type specified input file, render() always use \"html_document\" output format. Rending R Markdown document can result lot CSS. CSS included HTML <head> sent GMail can result message correctly displayed inline Gmail web client. get around can specify include_css = FALSE. mean styling present resulting message, message content correctly rendered inline.","code":""},{"path":[]},{"path":"https://datawookie.github.io/emayili/reference/render.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Markdown into email â€” render","text":"","code":"# Plain Markdown  markdown <- \"[This](https://www.google.com) is a link.\" filename <- \"message.md\"  # Render from Markdown in character vector. msg <- envelope() %>% render(markdown)  # Create a file containing Markdown cat(markdown, file = filename)  # Render from Markdown in file. msg <- envelope() %>% render(filename)  # Cleanup. file.remove(filename) #> [1] TRUE  # R Markdown  filename <- \"gh-doc.Rmd\"  # Create an Rmd document from template. rmarkdown::draft(   filename,   template = \"github_document\",   package = \"rmarkdown\",   edit = FALSE )  # Check for suitable version of Pandoc (https://pandoc.org/). # # Need to have version 2.0 or greater to support required --quiet option. # pandoc <- rmarkdown::find_pandoc() suitable_pandoc <- !is.null(pandoc$dir) && grepl(\"^2\", pandoc$version)  # Render from Rmd file. if (suitable_pandoc) {   msg <- envelope() %>%     render(filename, include_css = c(\"rmd\", \"bootstrap\")) }  # Cleanup. file.remove(filename) #> [1] TRUE"},{"path":"https://datawookie.github.io/emayili/reference/response.html","id":null,"dir":"Reference","previous_headings":"","what":"Add In-Reply-To and References header fields â€” response","title":"Add In-Reply-To and References header fields â€” response","text":"Add -Reply-References header fields","code":""},{"path":"https://datawookie.github.io/emayili/reference/response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add In-Reply-To and References header fields â€” response","text":"","code":"inreplyto(msg, msgid, subject_prefix = \"Re: \")  references(msg, msgid, subject_prefix = \"Re: \")"},{"path":"https://datawookie.github.io/emayili/reference/response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add In-Reply-To and References header fields â€” response","text":"msg message object. msgid message ID. contents Message-ID field another message. subject_prefix Prefix add subject. specified prepended onto Subject field. Set NULL required.","code":""},{"path":"https://datawookie.github.io/emayili/reference/response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add In-Reply-To and References header fields â€” response","text":"message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add In-Reply-To and References header fields â€” response","text":"","code":"envelope() %>% inreplyto(\"<6163c08e.1c69fb81.65b78.183c@mx.google.com>\") # Now for German. envelope() %>%   inreplyto(\"6163c08e.1c69fb81.65b78.183c@mx.google.com\", \"AW: \") # And also for Danish, Norwegian and Swedish (but not Finnish!). envelope() %>%   references(\"6163c08e.1c69fb81.65b78.183c@mx.google.com\", \"SV: \") # Can reference multiple messages. envelope() %>%   references(c(     \"6163c08e.1c69fb81.65b78.183c@mx.google.com\",     \"e8e338ff-a05c-4c0f-99f2-0dc8fb72682f@mail.gmail.com\"   ))"},{"path":"https://datawookie.github.io/emayili/reference/sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or query message sensitivity â€” sensitivity","title":"Set or query message sensitivity â€” sensitivity","text":"Manipulate Sensitivity field specified RFC 2156.","code":""},{"path":"https://datawookie.github.io/emayili/reference/sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or query message sensitivity â€” sensitivity","text":"","code":"sensitivity(msg, sensitivity = NULL)"},{"path":"https://datawookie.github.io/emayili/reference/sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or query message sensitivity â€” sensitivity","text":"msg message object. sensitivity Sensitivity level. One \"personal\", \"private\", \"company-confidential\".","code":""},{"path":"https://datawookie.github.io/emayili/reference/sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set or query message sensitivity â€” sensitivity","text":"message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/sensitivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set or query message sensitivity â€” sensitivity","text":"","code":"# Not sensitive. envelope() %>%   subject(\"Your daily dose of spam\")  # Sensitive personal message. envelope() %>%   subject(\"The results from your test\") %>%   sensitivity(\"personal\")  # Sensitive private message. envelope() %>%   subject(\"Your OTP (don't show this to anybody!\") %>%   sensitivity(\"private\")  # Sensitive business message. envelope() %>%   subject(\"Top Secret Strategy Document\") %>%   sensitivity(\"company-confidential\")"},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SMTP server object. â€” server","title":"Create a SMTP server object. â€” server","text":"Create object can used send messages SMTP server.","code":""},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SMTP server object. â€” server","text":"","code":"server(   host,   port = 25,   username = NULL,   password = NULL,   insecure = FALSE,   reuse = TRUE,   helo = NA,   protocol = NA,   use_ssl = NA,   test = FALSE,   pause_base = 1,   max_times = 5,   ... )  gmail(username, password, ...)  sendgrid(password, ...)  mailgun(username, password, ...)  sendinblue(username, password, ...)  mailersend(username, password, ...)  mailfence(username, password, ...)  zeptomail(password, ...)  smtpbucket(...)  mailtrap(username, password, sandbox = FALSE, bulk = FALSE, ...)"},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SMTP server object. â€” server","text":"host DNS name IP address SMTP server. port Port SMTP server listening . username Username SMTP server. password Password SMTP server API key. insecure Whether ignore SSL issues. reuse Whether connection SMTP server left open reuse. helo HELO domain name sending host. left NA use local host name. protocol protocol (SMTP SMTPS) use communicating server. Default choose appropriate protocol based port. use_ssl Whether use SSL. specified SSL used port 465 587. enables SSL non-standard ports. test Test login server. pause_base Base delay (seconds) exponential backoff. See rate_backoff. max_times Maximum number times retry. ... Additional curl options. See curl::curl_options() list supported options. sandbox Use email sandbox test server. bulk Send bulk mail multiple recipients.","code":""},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SMTP server object. â€” server","text":"function used send messages server.","code":""},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a SMTP server object. â€” server","text":"functions return function can called message object. function mediates interaction Simple Mail Transfer Protocol (SMTP) server. SMTP plain text protocol, means secure. secure variant, SMTPS, comes two flavours: TLS StartTLS. TLS (also called Implicit TLS) connection server initiated using Secure Socket Layer (SSL) Transport Layer Security (TLS) certificate. connection secure start. contract, StartTLS connection initiated plain text upgraded TLS possible. convention TLS operates port 465 StartTLS port 587. specifications SMTP server given SMTP URL, takes one following forms: mail.example.com â€” hostname mail.example.com:587 â€” hostname port smtp://mail.example.com â€” SMTP URL (default port) smtps://mail.example.com â€” SMTPS URL (default port) smtp://mail.example.com:25 â€” SMTP URL (explicit port) smtps://mail.example.com:587 â€” SMTPS URL (explicit port)","code":""},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":"gmail","dir":"Reference","previous_headings":"","what":"Gmail","title":"Create a SMTP server object. â€” server","text":"trouble authenticating Gmail try following: enable 2-factor authentication create app password. use app password rather usual account password.","code":""},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":"sendgrid","dir":"Reference","previous_headings":"","what":"Sendgrid","title":"Create a SMTP server object. â€” server","text":"use SendGrid need first create API key. # nolint use API key password. SendGrid accept messages ports 25, 587 2525 (using SMTP) well 465 (using SMTPS).","code":""},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":"mailgun","dir":"Reference","previous_headings":"","what":"Mailgun","title":"Create a SMTP server object. â€” server","text":"use Mailgun need first register sender domain. assigned username password. Mailgun accept messages ports 25 587 (using SMTP) well 465 (using SMTPS).","code":""},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":"sendinblue","dir":"Reference","previous_headings":"","what":"Sendinblue","title":"Create a SMTP server object. â€” server","text":"use Sendinblue need first create account. find SMTP username password SMTP & API section account settings.","code":""},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":"mailersend","dir":"Reference","previous_headings":"","what":"MailerSend","title":"Create a SMTP server object. â€” server","text":"use MailerSend need first create account. find SMTP username password Domains. See send emails via SMTP MailerSend. Although likely problem practice, MailerSend insists messages minimum valid subject either text HTML content.","code":""},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":"mailfence","dir":"Reference","previous_headings":"","what":"Mailfence","title":"Create a SMTP server object. â€” server","text":"use Mailfence need create premium account.","code":""},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":"zeptomail","dir":"Reference","previous_headings":"","what":"ZeptoMail","title":"Create a SMTP server object. â€” server","text":"Zeptomail email sending service provided Zoho Corporation. designed primarily transactional email delivery, includes emails like password resets, order confirmations, notifications, automated, non-marketing communications websites applications need send users.","code":""},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":"smtp-bucket","dir":"Reference","previous_headings":"","what":"SMTP Bucket","title":"Create a SMTP server object. â€” server","text":"SMTP Bucket fake SMTP server captures messages receives makes available website REST API. SMTP Bucket fake SMTP server captures messages receives makes available website REST API.","code":""},{"path":"https://datawookie.github.io/emayili/reference/server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a SMTP server object. â€” server","text":"","code":"# Set parameters for SMTP server (with username and password). smtp <- server(   host = \"smtp.gmail.com\",   port = 587,   username = \"bob@gmail.com\",   password = \"bd40ef6d4a9413de9c1318a65cbae5d7\" )  # Set parameters for a (fake) testing SMTP server. # # More information about this service can be found at https://www.smtpbucket.com/. # smtp <- server(   host = \"mail.smtpbucket.com\",   port = 8025 )  # Create a message msg <- envelope() %>%   from(\"bob@gmail.com\") %>%   to(\"alice@yahoo.com\")  # Send message (verbose output from interactions with server) if (FALSE) { # \\dontrun{ smtp(msg, verbose = TRUE) } # }  # To confirm that the message was sent, go to https://www.smtpbucket.com/ then: # # - fill in \"bob@gmail.com\" for the Sender field and # - fill in \"alice@yahoo.com\" for the Recipient field then # - press the Search button.  # With explicit HELO domain. # smtp <- server(   host = \"mail.example.com\",   helo = \"client.example.com\" )  # Set parameters for Gmail SMTP server. The host and port are implicit. smtp <- gmail(   username = \"bob@gmail.com\",   password = \"bd40ef6d4a9413de9c1318a65cbae5d7\" )  # Set API key for SendGrid SMTP server. smtp <- sendgrid(   password = \"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\" )  # Set username and password for Mailgun SMTP server. smtp <- mailgun(   username = \"postmaster@sandbox9ptce35fdf0b31338dec4284eb7aaa59.mailgun.org\",   password = \"44d072e7g2b5f3bf23b2b642da0fe3a7-2ac825a1-a5be680a\" )  # Set username and password for Sendinblue SMTP server. smtp <- sendinblue(   username = \"bob@gmail.com\",   password = \"xsmtpsib-c75cf91323adc53a1747c005447cbc9a893c35888635bb7bef1a624bf773da33\" )  # Set username and password for MailerSend SMTP server. smtp <- mailersend(   username = \"NS_Pf3ALM@gmail.com\",   password = \"e5ATWLlTnWWDaKeE\" )  # Set username and password for Mailfence SMTP server. smtp <- mailfence(   username = \"bob\",   password = \"F!Uosd6xbhSjd%63\" )  # Set password for ZeptoMail SMTP server. # nolint start smtp <- zeptomail(\"yA6KbHsL4l2mmI8Ns0/fs9iSTj8yG0dYBgfIG0j6Fsv4P2uV32xh8ciEYNYlRkgCC7wRfkgWA==\") # nolint end  # SMTP Bucket server. smtp <- smtpbucket()  # SMTP Bucket server. smtp <- smtpbucket()"},{"path":"https://datawookie.github.io/emayili/reference/subject.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or query subject of message. â€” subject","title":"Add or query subject of message. â€” subject","text":"Add query subject message.","code":""},{"path":"https://datawookie.github.io/emayili/reference/subject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or query subject of message. â€” subject","text":"","code":"subject(   msg,   subject = NULL,   prefix = NA,   suffix = NA,   interpolate = TRUE,   .open = \"{{\",   .close = \"}}\",   .envir = NULL )"},{"path":"https://datawookie.github.io/emayili/reference/subject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or query subject of message. â€” subject","text":"msg message object. subject subject message. prefix subject prefix. suffix subject suffix. interpolate Whether interpolate input using glue. .open opening delimiter. .close closing delimiter. .envir Environment used glue interpolation. Defaults parent.frame().","code":""},{"path":"https://datawookie.github.io/emayili/reference/subject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add or query subject of message. â€” subject","text":"message object subject message object (subject NULL).","code":""},{"path":"https://datawookie.github.io/emayili/reference/subject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add or query subject of message. â€” subject","text":"prefix suffix can used add extra subject abbreviations.","code":""},{"path":[]},{"path":"https://datawookie.github.io/emayili/reference/subject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or query subject of message. â€” subject","text":"","code":"# Create a message and set the subject msg <- envelope() %>% subject(\"Updated report\")  # Retrieve the subject for a message subject(msg) #> [1] \"Updated report\" #> attr(,\"class\") #> [1] \"encodable\""},{"path":"https://datawookie.github.io/emayili/reference/template.html","id":null,"dir":"Reference","previous_headings":"","what":"Add message body from template â€” template","title":"Add message body from template â€” template","text":"Variables given named arguments override variables environment name.","code":""},{"path":"https://datawookie.github.io/emayili/reference/template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add message body from template â€” template","text":"","code":"template(msg, .name, ..., .envir = parent.frame())"},{"path":"https://datawookie.github.io/emayili/reference/template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add message body from template â€” template","text":"msg message object. .name template name. can provided either: () name template baked package, (ii) relative path (iii) absolute path. paths must directory containing template files, files . ... Variables substitution. .envir Environment substitution.","code":""},{"path":"https://datawookie.github.io/emayili/reference/template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add message body from template â€” template","text":"message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add message body from template â€” template","text":"probably get variables environment used part pipeline. case might need use %|>% (nested pipe) operator.","code":""},{"path":"https://datawookie.github.io/emayili/reference/template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add message body from template â€” template","text":"","code":"# Use a builtin template. envelope() %>%   template(     \"newsletter\",     title = \"A Sample Newsletter\",     articles = list(       list(         \"title\" = \"Article (with date)\",         \"content\" = as.list(\"Vivamus, justo quisque, sed.\"),         \"date\" = \"1 January 2022\"       ),       list(         \"title\" = \"Another Article (without date)\",         \"content\" = as.list(\"Quam lorem sed metus egestas.\")       )     )   ) # Use a custom local template. if (FALSE) { # \\dontrun{ envelope() %>%   template(\"./templates/custom-template\") } # }"},{"path":"https://datawookie.github.io/emayili/reference/text.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a text body to a message. â€” text","title":"Add a text body to a message. â€” text","text":"Add text/plain content message.","code":""},{"path":"https://datawookie.github.io/emayili/reference/text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a text body to a message. â€” text","text":"","code":"text(   msg,   content,   disposition = \"inline\",   charset = \"utf-8\",   encoding = \"7bit\",   language = FALSE,   interpolate = TRUE,   .open = \"{{\",   .close = \"}}\",   .envir = NULL )"},{"path":"https://datawookie.github.io/emayili/reference/text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a text body to a message. â€” text","text":"msg message object. content string message content. disposition content displayed inline attachment? Valid options \"inline\" \"attachment\". set NA guess appropriate value. charset character set used. often either \"UTF-8\" \"ISO-8859-1\". encoding content transformed ASCII. Options \"7bit\", \"quoted-printable\" \"base64\". Use NA NULL (\"identity\") encoding. language Language content. FALSE include language field. TRUE attempt auto-detect language. Otherwise use specified language. interpolate Whether interpolate input using glue. .open opening delimiter. .close closing delimiter. .envir Environment used glue interpolation. Defaults parent.frame().","code":""},{"path":"https://datawookie.github.io/emayili/reference/text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a text body to a message. â€” text","text":"message object.","code":""},{"path":"https://datawookie.github.io/emayili/reference/text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a text body to a message. â€” text","text":"text/plain format described RFC 2646. Uses glue::glue() evaluate expressions enclosed brackets R code.","code":""},{"path":[]},{"path":"https://datawookie.github.io/emayili/reference/text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a text body to a message. â€” text","text":"","code":"msg <- envelope() %>% text(\"Hello!\")  # Using {glue} interpolation. # name <- \"Alice\" msg <- envelope() %>% text(\"Hello {name}.\")  print(msg, details = TRUE) #> Date:                         Tue, 28 Jan 2025 08:02:58 GMT #> X-Mailer:                     {emayili}-0.9.2 #> MIME-Version:                 1.0 #> Content-Type:                 text/plain;  #>                               charset=utf-8;  #>                               format=flowed #> Content-Transfer-Encoding:    7bit #> Content-MD5:                  57XDXVaQowq93ca6rVsFjg== #>  #> Hello {name}.  # Disable {glue} interpolation. # msg <- envelope() %>% text(\"This is a set: {1, 2, 3}.\", interpolate = FALSE)"},{"path":"https://datawookie.github.io/emayili/reference/validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate email address â€” validate","title":"Validate email address â€” validate","text":"Validate email address","code":""},{"path":"https://datawookie.github.io/emayili/reference/validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate email address â€” validate","text":"","code":"validate(addr, deliverability = TRUE)"},{"path":"https://datawookie.github.io/emayili/reference/validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate email address â€” validate","text":"addr email address. deliverability Whether check deliverability (valid domain).","code":""},{"path":"https://datawookie.github.io/emayili/reference/validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate email address â€” validate","text":"logical indicating whether address valid.","code":""},{"path":"https://datawookie.github.io/emayili/reference/validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate email address â€” validate","text":"","code":"# A valid address. validate(\"cran-sysadmin@r-project.org\") #> [1] TRUE # An invalid address. validate(\"help@this-domain-does-not-exist.com\") #> WARN    [2025-01-28 08:02:59.406012] * Email address doesn't have a valid domain. #> [1] FALSE"}]
